//! External API types for communication between Frontend and Backend
//!
//! These types define the public REST API contract that external clients
//! (like the frontend) use to communicate with our backend service.

use serde::{Deserialize, Serialize};

/// Request to ingest a GitHub repository
///
/// The frontend sends this to initiate the ingestion process for a new project.
/// The GitHub URL will be validated and canonicalized by the backend.
#[derive(Deserialize)]
pub struct IngestRequest {
    /// The GitHub repository URL to ingest (any valid format accepted)
    ///
    /// Examples:
    /// - `https://github.com/owner/repo`
    /// - `https://github.com/Owner/Repo.git`
    /// - `https://github.com/owner/repo/`
    pub github_url: String,
}

/// Response from successful repository ingestion
///
/// Contains the canonicalized GitHub URL that should be used in subsequent
/// API calls to ensure consistency.
#[derive(Serialize)]
pub struct IngestResponse {
    /// The canonicalized GitHub repository URL
    ///
    /// Always in the format: `https://github.com/owner/repo.git`
    /// - Lowercase owner and repository names
    /// - Always includes `.git` suffix
    /// - No trailing slashes or extra path segments
    pub canonical_url: String,
}

/// Request to ask a question about an ingested project
///
/// The frontend sends this to get AI-powered answers about a specific
/// repository that has been previously ingested.
#[derive(Deserialize)]
pub struct AnswerRequest {
    /// The canonical GitHub repository URL (from IngestResponse)
    ///
    /// Must exactly match the `canonical_url` returned from the ingest endpoint.
    /// If the URL doesn't match any ingested project, a 404 error will be returned.
    pub repo_url: String,

    /// The question to ask about the repository
    ///
    /// Can be any natural language question about the codebase, documentation,
    /// architecture, implementation details, etc.
    pub question: String,
}

/// Response containing the AI-generated answer
///
/// Provides both the answer and confirmation of which project was queried.
#[derive(Serialize)]
pub struct AnswerResponse {
    /// The AI-generated answer to the user's question
    ///
    /// This response is generated by the LLM using the ingested codebase
    /// as context along with the user's question.
    pub answer: String,

    /// The canonical URL of the project that was queried
    ///
    /// Included for confirmation and frontend state management.
    pub project_url: String,
}
